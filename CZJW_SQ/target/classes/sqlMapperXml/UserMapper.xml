<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.alphasta.mapper.UserMapper">

    <resultMap id="BaseResultMap" type="com.alphasta.model.User">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="loginname" property="loginname" jdbcType="VARCHAR"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="sex" property="sex" jdbcType="TINYINT"/>
        <result column="age" property="age" jdbcType="TINYINT"/>
        <result column="usertype" property="usertype" jdbcType="TINYINT"/>
        <result column="status" property="status" jdbcType="TINYINT"/>
        <result column="organization_id" property="organizationId" jdbcType="INTEGER"/>
        <result column="createdate" property="createdate" jdbcType="TIMESTAMP"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="phone1" property="phone1" jdbcType="VARCHAR"/>
        <result column="phone2" property="phone2" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="isAdmin" property="isAdmin" jdbcType="INTEGER"/>
        <result column="positionId" property="positionId" jdbcType="INTEGER"/>
    </resultMap>

    <resultMap id="userVoResultMap" type="com.alphasta.commons.result.UserVo">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="loginname" property="loginname" jdbcType="VARCHAR"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="sex" property="sex" jdbcType="TINYINT"/>
        <result column="age" property="age" jdbcType="TINYINT"/>
        <result column="usertype" property="usertype" jdbcType="TINYINT"/>
        <result column="status" property="status" jdbcType="TINYINT"/>
        <result column="organization_id" property="organizationId" jdbcType="INTEGER"/>
        <result column="createdate" property="createdate" jdbcType="TIMESTAMP"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="phone1" property="phone1" jdbcType="VARCHAR"/>
        <result column="phone2" property="phone2" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
		<result column="isAdmin" property="isAdmin" jdbcType="INTEGER"/>
        <result column="positionId" property="positionId" jdbcType="INTEGER"/>
        <result column="organizationName" property="organizationName" jdbcType="VARCHAR"/>
        <result column="positionName" property="positionName" jdbcType="VARCHAR"/>

        <collection property="rolesList" ofType="Role">
            <id column="roleId" property="id"/>
            <result column="roleName" property="name"/>
        </collection>
    </resultMap>
    
    <sql id="Base_Column_List">
	    id, loginname, name, password, sex, age, usertype, status, organization_id, createdate, 
	    phone,phone1,phone2,email,isAdmin,positionId
  	</sql>
  	<!-- 更改状态的存储过程 -->
  	  	<parameterMap type="java.util.Map" id="getUserCountMap">
         <parameter property="userId" mode="IN" jdbcType="VARCHAR"/>
    </parameterMap>
  	<select id="getUserCount" parameterMap="getUserCountMap" statementType="CALLABLE" resultType="java.lang.Integer">
          CALL pro_user_state(?);
    </select>
  	<select id="getUser"  parameterType="java.lang.String" resultMap="BaseResultMap">
	       select  <include refid="Base_Column_List"/> from User  where id=#{id} 
	 </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from user
        where id = #{id,jdbcType=BIGINT}
    </select>

    <select id="findUserByLoginName" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        from user
        where loginname = #{username}
    </select>

    <select id="findUserVoById" resultMap="userVoResultMap" parameterType="java.lang.Long">
        SELECT
        t.id,
        loginname,
        t.`name`,
        password,
        sex,
        age,
        usertype,
        t.`status`,
        organization_id,
        t.createdate,
        phone,phone1,phone2,email,positionId,
        s.`name` AS organizationName,
        o.id AS roleId,
        o.`name` AS roleName,
        p.`name` AS positionName
        FROM
        user t
        LEFT JOIN user_role r ON t.id = r.user_id
        LEFT JOIN role o ON r.role_id = o.id
        LEFT JOIN organization s ON s.id = t.organization_id
        LEFT JOIN position p ON p.id = t.positionId
        <where>
            t.id = #{id}
        </where>
    </select>

    <select id="findUserById" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from user
        where id = #{id}
    </select>
    
    <select id="findUserByOId" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from user
        where organization_id = #{oId}
    </select>
    
     <select id="findUserByOrgid" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from user
        where organization_id = #{oId}
    </select>

    <select id="findUserPageCondition" resultMap="userVoResultMap" parameterType="PageInfo">
        SELECT
        t.id,
        loginname,
        t.`name`,
        `password`,
        sex,
        age,
        usertype,
        t.`status`,
        organization_id,
        t.createdate,
        phone,phone1,phone2,email,positionId,
        s.`name` AS organizationName,
        o.id AS roleId,
        o.`name` AS roleName,
        p.name AS positionName
        FROM
        user t
        LEFT JOIN user_role r ON t.id = r.user_id
        LEFT JOIN role o ON r.role_id = o.id
        LEFT JOIN organization s ON s.id = t.organization_id
        LEFT JOIN position p ON p.id = t.positionId
        <where>
            <if test=" condition.name != null and condition.name != '' ">
                t.name LIKE '%${condition.name}%'
            </if>
            <if test=" condition.organizationId != null ">
                t.organization_id = #{condition.organizationId}
            </if>
            <if test="condition.startTime != null">
                <![CDATA[
            and t.createdate >= #{condition.startTime}
           ]]>
            </if>
            <if test="condition.endTime != null">
                <![CDATA[
            and t.createdate <= #{condition.endTime}
        ]]>
            </if>
        </where>
        LIMIT #{from}, #{size}
    </select>

    <select id="findUserPageCount" resultType="java.lang.Integer" parameterType="PageInfo">
        select count(*) count
        from user t
        <where>
            <if test=" condition.name != null and condition.name != '' ">
                t.name = #{condition.name}
            </if>
            <if test=" condition.organizationId != null ">
                t.organization_id = #{condition.organizationId}
            </if>
            <if test="condition.startTime != null">
                <![CDATA[
            and t.createdate >= #{condition.startTime}
           ]]>
            </if>
            <if test="condition.endTime != null">
                <![CDATA[
            and t.createdate <= #{condition.endTime}
            ]]>
            </if>
        </where>
    </select>
    
    <select id="findUser" resultMap="BaseResultMap" parameterType="com.alphasta.model.User">
    	select
        u.id, u.loginname, u.name, u.password, u.sex, u.age, u.usertype, u.status, u.organization_id, u.createdate, 
	    u.phone,u.phone1,u.phone2,u.email,u.isAdmin,u.positionId
		FROM user u
		INNER JOIN organization o ON u.organization_id = o.id
		inner join organization oo on o.code like concat(oo.`code`,'%')
        <where>
        	<if test="organizationId != null">
        		and oo.id = #{organizationId}
        	</if>
        </where>
    </select>

    <delete id="deleteById" parameterType="java.lang.Long">
	    delete from user
	    where id = #{id,jdbcType=BIGINT}
  	</delete>

    <insert id="insert" parameterType="com.alphasta.model.User">
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into user (loginname, name, password,
        sex, age, usertype,
        status, organization_id, createdate,
        phone,phone1,phone2,email,positionId,isAdmin)
        values (#{loginname,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
        #{sex,jdbcType=TINYINT}, #{age,jdbcType=TINYINT}, #{usertype,jdbcType=TINYINT},
        #{status,jdbcType=TINYINT}, #{organizationId,jdbcType=INTEGER}, now(),
        #{phone,jdbcType=VARCHAR},#{phone1,jdbcType=VARCHAR},#{phone2,jdbcType=VARCHAR},
        #{email,jdbcType=VARCHAR},#{positionId,jdbcType=BIGINT},0)
    </insert>

    <update id="updateUserPwdById">
	    update user
	    set password = #{pwd,jdbcType=VARCHAR},
	    createdate = now()
	    where id = #{userId,jdbcType=BIGINT}
  	</update>

    <update id="updateUser" parameterType="com.alphasta.model.User">
        update user
        <set>
            <if test="loginname != null">
                loginname = #{loginname,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                sex = #{sex,jdbcType=TINYINT},
            </if>
            <if test="age != null">
                age = #{age,jdbcType=TINYINT},
            </if>
            <if test="usertype != null">
                usertype = #{usertype,jdbcType=TINYINT},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
            <if test="organizationId != null">
                organization_id = #{organizationId,jdbcType=INTEGER},
            </if>
            <if test="createdate != null">
                createdate = #{createdate,jdbcType=TIMESTAMP},
            </if>
            <if test="phone != null">
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="phone1 != null">
                phone1 = #{phone1,jdbcType=VARCHAR},
            </if>
            <if test="phone2 != null">
                phone2 = #{phone2,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="positionId != null">
                positionId = #{positionId,jdbcType=BIGINT},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
</mapper>